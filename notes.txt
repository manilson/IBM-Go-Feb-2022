Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodology:
    No powerpoint
    100% hands on
    Atleast 50% of the participants should have completed the assignments for us to move on.

About You:
    Name
    Experience
    Primary Skillset
    Experience in Golang (if any)
    Any interesting books / shows you read / watched recently

Software Requirements:
    1. Go (go.dev/dl)
    2. Visual Studio Code

Why Go?
    1. Better Performance (fact : go performance is equivalent to 'C')
    2. Simplicity
    3. Scalability
    4. Lesser Compilation Time
    5. 

Paradox of Choice (Barry Schwartz)

    1. Simplicity
        ONLY 25 keywords
            a. No access modifiers
            b. No classes (Only structs & functions)
            c. No inheritance (Only composition)
            d. No pointer arithmetic
            e. Everything is a value (no implicit/builtin reference type)
            f. No implicit type conversion
            g. No exceptions (Only errors)
    2. As powerful as 'C' without the overheads of 'C'
        a. Go has a builtin garbage collector
        b. Compiled to Native code
        c. Fast compilation
    3. Built for concurrency
        Language features built for concurrency
            go, range, select, channel (data type), <- (channel operator)
            sync package
        100s of goroutines can be executed using 1 OS thread

concurrency
    The ability to have more than one 'execution path' in the application


func f1(){

}

func f2(){

}

go f1()
f2()

Language
    Data Types


Running a go program
    go run <filename>.go

Creating a build
    go build <filename>.go
    go build -o hw hello-world.go  (customize the name of the executable)

Creating a cross-platform build
    GOOS=windows GOARCH=amd64 go build hello-world.go

Data types in Go
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real (float32) + imaginary (float32))
    complex128 (real (float64) + imaginary (float64))

    byte (alias for uint8)
    rune (alias for int32) (represent a Unicode code point) (character)

    
assignment:1
    Write a program that will print all the prime numbers between 3 and 100 (inclusive)

Assignment:2
    Display the following menu:
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    Ask the user to enter a choice
    if choice is 1 - 4
        Accept 2 numbers from the user
        perform the operation
        print the result
        display the menu again
    if choice == 5
        exit from the application
    if choice > 5 OR < 1
        display the message "Invalid choice"
        display the menu again

    to exit from the application
        os.Exit()

Functions
    variadic functions
    anonymous functions
    Higher order functions
        Functions can be treated like data
            1. functions can be assigned to variables
            2. functions can be passed as arguments to other functions
            3. functions can be returned by other functions

Assignment:3
    Refactor the assignment:2 solution using functions

Collections
    Array
        Fixed size collection of data of the same type
    Slice
        Varying size collection of data of the same type
    Map
        Collection of key/value pairs